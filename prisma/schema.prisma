// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator pothos {
  provider    = "prisma-pothos-types"
  prismaUtils = true
}

generator pothosCrud {
  provider            = "prisma-generator-pothos-codegen"
  generatorConfigPath = "../pothos.config.cjs"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String? // For email/password auth (optional - can be null for OAuth-only users)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OAuth fields
  googleId String? @unique
  githubId String? @unique

  // Relations
  todoLists TodoList[]
  todos     Todo[]
  sessions  Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model TodoList {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos  Todo[]

  @@map("todo_lists")
}

model Todo {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TodoStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tags        String[]

  // Relations
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  todoListId String?
  todoList   TodoList? @relation(fields: [todoListId], references: [id], onDelete: SetNull)

  @@map("todos")
}

model DomainEvent {
  id          String   @id @default(cuid())
  eventType   String
  aggregateId String
  eventData   Json
  version     Int      @default(1)
  createdAt   DateTime @default(now())

  @@map("domain_events")
}

enum TodoStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Embedding {
  id         String   @id @default(cuid())
  entityType String // 'todo', 'todoList', etc.
  entityId   String // ID of the entity
  content    String   @db.Text // Original text content
  embedding  Json // Vector embedding stored as JSON array
  model      String // Model used for embedding (e.g., 'text-embedding-ada-002')
  dimensions Int // Number of dimensions in the embedding
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([entityType, entityId])
  @@index([entityType])
  @@map("embeddings")
}
