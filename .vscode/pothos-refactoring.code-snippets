{
  "Singleton Service": {
    "prefix": "singleton",
    "body": [
      "import { SingletonService } from '@/infrastructure/core/SingletonService';",
      "import { logger } from '@/logger';",
      "",
      "export class ${1:ServiceName}Service extends SingletonService<${1:ServiceName}Service> {",
      "  protected constructor() {",
      "    super();",
      "    this.initialize();",
      "  }",
      "",
      "  static getInstance(): ${1:ServiceName}Service {",
      "    return super.getInstance();",
      "  }",
      "",
      "  private initialize(): void {",
      "    logger.info('${1:ServiceName}Service initialized');",
      "    ${2:// Initialization logic}",
      "  }",
      "",
      "  ${3:// Service methods}",
      "}"
    ],
    "description": "Create a new singleton service extending SingletonService"
  },
  
  "Async Singleton Service": {
    "prefix": "asyncsingleton",
    "body": [
      "import { AsyncSingletonService } from '@/infrastructure/core/SingletonService';",
      "import { logger } from '@/logger';",
      "",
      "export class ${1:ServiceName}Service extends AsyncSingletonService<${1:ServiceName}Service> {",
      "  private client: ${2:ClientType} | null = null;",
      "",
      "  protected constructor() {",
      "    super();",
      "  }",
      "",
      "  static async getInstance(): Promise<${1:ServiceName}Service> {",
      "    return super.getInstanceAsync(async (instance) => {",
      "      await instance.initialize();",
      "    });",
      "  }",
      "",
      "  private async initialize(): Promise<void> {",
      "    logger.info('Initializing ${1:ServiceName}Service...');",
      "    ${3:// Async initialization logic}",
      "    logger.info('${1:ServiceName}Service initialized');",
      "  }",
      "",
      "  ${4:// Service methods}",
      "}"
    ],
    "description": "Create a new async singleton service extending AsyncSingletonService"
  },
  
  "Base Repository": {
    "prefix": "repository",
    "body": [
      "import { BaseRepository } from '@/infrastructure/core/BaseRepository';",
      "import { ${1:Entity} } from '@/domain/aggregates/${1:Entity}';",
      "import { PrismaClient, ${1:Entity} as Prisma${1:Entity} } from '@prisma/client';",
      "",
      "export class ${1:Entity}Repository extends BaseRepository<${1:Entity}, Prisma${1:Entity}> {",
      "  constructor(prisma: PrismaClient) {",
      "    super(prisma);",
      "  }",
      "",
      "  protected getModelName(): string {",
      "    return '${1/(.*)/${1:/downcase}/}';",
      "  }",
      "",
      "  protected mapToDomain(data: Prisma${1:Entity}): ${1:Entity} {",
      "    return new ${1:Entity}(",
      "      data.id,",
      "      ${2:// Map properties}",
      "      data.createdAt,",
      "      data.updatedAt,",
      "      data.version",
      "    );",
      "  }",
      "",
      "  protected mapToCreateInput(entity: ${1:Entity}): any {",
      "    return {",
      "      ${3:// Map create properties}",
      "    };",
      "  }",
      "",
      "  protected mapToUpdateInput(entity: ${1:Entity}): any {",
      "    return {",
      "      ${4:// Map update properties}",
      "      updatedAt: entity.updatedAt,",
      "      version: entity.version,",
      "    };",
      "  }",
      "",
      "  ${5:// Custom repository methods}",
      "}"
    ],
    "description": "Create a new repository extending BaseRepository"
  },
  
  "Base Aggregate": {
    "prefix": "aggregate",
    "body": [
      "import { BaseAggregate } from '@/domain/core/BaseAggregate';",
      "import { ${1:Aggregate}Created, ${1:Aggregate}Updated } from '@/domain/events';",
      "",
      "export class ${1:Aggregate} extends BaseAggregate {",
      "  private _${2:property}: ${3:type};",
      "",
      "  constructor(",
      "    id: string,",
      "    ${2:property}: ${3:type},",
      "    createdAt = new Date(),",
      "    updatedAt = new Date(),",
      "    version = 0",
      "  ) {",
      "    super(id, createdAt, updatedAt, version);",
      "    this._${2:property} = ${2:property};",
      "    this.validate();",
      "  }",
      "",
      "  static create(",
      "    id: string,",
      "    ${2:property}: ${3:type}",
      "  ): ${1:Aggregate} {",
      "    const ${1/(.*)/${1:/downcase}/} = new ${1:Aggregate}(id, ${2:property});",
      "    ",
      "    ${1/(.*)/${1:/downcase}/}.addDomainEvent(",
      "      new ${1:Aggregate}Created(id, { ${2:property} }, ${1/(.*)/${1:/downcase}/}.version)",
      "    );",
      "    ",
      "    return ${1/(.*)/${1:/downcase}/};",
      "  }",
      "",
      "  update(updates: { ${2:property}?: ${3:type} }): void {",
      "    const hasChanges = this.updateFields(updates);",
      "    ",
      "    if (hasChanges) {",
      "      this.validate();",
      "      this.addDomainEvent(",
      "        new ${1:Aggregate}Updated(this.id, updates, this.version)",
      "      );",
      "    }",
      "  }",
      "",
      "  protected validate(): void {",
      "    ${4:// Validation logic}",
      "  }",
      "",
      "  get ${2:property}(): ${3:type} { return this._${2:property}; }",
      "}"
    ],
    "description": "Create a new aggregate extending BaseAggregate"
  },
  
  "GraphQL Authenticated Resolver": {
    "prefix": "authresolver",
    "body": [
      "import { authenticated } from '@/api/middleware/authenticated';",
      "",
      "export const ${1:resolverName} = authenticated(",
      "  async (parent, args, context) => {",
      "    ${2:// Resolver logic - context.user is guaranteed}",
      "    return ${3:result};",
      "  }",
      ");"
    ],
    "description": "Create an authenticated GraphQL resolver"
  },
  
  "GraphQL Middleware Composition": {
    "prefix": "composedresolver",
    "body": [
      "import { compose, authenticated, withPermissions, rateLimit } from '@/api/middleware/authenticated';",
      "",
      "export const ${1:resolverName} = compose(",
      "  authenticated,",
      "  withPermissions(['${2:permission}']),",
      "  rateLimit({ window: ${3:60000}, max: ${4:100} })",
      ")(",
      "  async (parent, args, context) => {",
      "    ${5:// Resolver logic}",
      "    return ${6:result};",
      "  }",
      ");"
    ],
    "description": "Create a GraphQL resolver with composed middleware"
  },
  
  "Cache Invalidation Resolver": {
    "prefix": "cacheinvalidation",
    "body": [
      "import { withCacheInvalidation, CachePatterns } from '@/api/helpers/cacheInvalidation';",
      "",
      "export const ${1:resolverName} = withCacheInvalidation(",
      "  CachePatterns.${2:TODO},",
      "  (result) => ({",
      "    entityId: result.id,",
      "    ${3:userId: result.userId,}",
      "  })",
      ")(",
      "  async (parent, args, context) => {",
      "    ${4:// Resolver logic}",
      "    return ${5:result};",
      "  }",
      ");"
    ],
    "description": "Create a resolver with automatic cache invalidation"
  },
  
  "DataLoader Creation": {
    "prefix": "dataloader",
    "body": [
      "import { createBatchLoader, createRelationLoader } from '@/api/dataloaders/createDataLoader';",
      "",
      "export const ${1:entity}Loader = createBatchLoader(prisma, {",
      "  modelName: '${1:entity}',",
      "  ${2:// Additional options}",
      "});",
      "",
      "export const ${1:entity}By${3:Relation}Loader = createRelationLoader(prisma, {",
      "  modelName: '${1:entity}',",
      "  relationField: '${3/(.*)/${1:/downcase}/}Id',",
      "  orderBy: { ${4:createdAt}: 'desc' },",
      "});"
    ],
    "description": "Create DataLoaders using the factory pattern"
  },
  
  "Domain Event": {
    "prefix": "domainevent",
    "body": [
      "import { DomainEvent } from '@/domain/events/DomainEvent';",
      "",
      "export class ${1:Aggregate}${2:Action} extends DomainEvent {",
      "  constructor(",
      "    aggregateId: string,",
      "    public readonly ${3:data}: ${4:DataType},",
      "    version: number",
      "  ) {",
      "    super(aggregateId, '${1:Aggregate}${2:Action}', version);",
      "  }",
      "}"
    ],
    "description": "Create a new domain event"
  },
  
  "Error Handler Usage": {
    "prefix": "errorhandler",
    "body": [
      "import { ErrorHandler, ${1:NotFoundError} } from '@/infrastructure/core/ErrorHandler';",
      "",
      "const errorHandler = ErrorHandler.getInstance();",
      "",
      "// Wrap async operation",
      "const result = await errorHandler.handleAsync(",
      "  async () => {",
      "    ${2:// Risky operation}",
      "  },",
      "  { operation: '${3:operationName}', ${4:resourceId: id} }",
      ");",
      "",
      "// Throw domain error",
      "if (!${5:resource}) {",
      "  throw new ${1:NotFoundError}('${6:Resource}', ${7:id});",
      "}"
    ],
    "description": "Use the centralized error handler"
  },
  
  "Repository Test": {
    "prefix": "repotest",
    "body": [
      "import { describe, it, expect, beforeEach, mock } from 'bun:test';",
      "import { ${1:Entity}Repository } from '@/infrastructure/repositories/${1:Entity}Repository';",
      "import { ${1:Entity} } from '@/domain/aggregates/${1:Entity}';",
      "import { PrismaClient } from '@prisma/client';",
      "",
      "describe('${1:Entity}Repository', () => {",
      "  let repository: ${1:Entity}Repository;",
      "  let mockPrisma: any;",
      "",
      "  beforeEach(() => {",
      "    mockPrisma = {",
      "      ${1/(.*)/${1:/downcase}/}: {",
      "        findUnique: mock(() => null),",
      "        findMany: mock(() => []),",
      "        create: mock(() => ({})),",
      "        update: mock(() => ({})),",
      "        delete: mock(() => ({})),",
      "      },",
      "    };",
      "    ",
      "    repository = new ${1:Entity}Repository(mockPrisma as PrismaClient);",
      "  });",
      "",
      "  it('should ${2:test description}', async () => {",
      "    ${3:// Test implementation}",
      "  });",
      "});"
    ],
    "description": "Create a repository test"
  },
  
  "Aggregate Test": {
    "prefix": "aggregatetest",
    "body": [
      "import { describe, it, expect } from 'bun:test';",
      "import { ${1:Aggregate} } from '@/domain/aggregates/${1:Aggregate}';",
      "import { ${1:Aggregate}Created, ${1:Aggregate}Updated } from '@/domain/events';",
      "",
      "describe('${1:Aggregate}', () => {",
      "  it('should create a new ${1:Aggregate}', () => {",
      "    const ${1/(.*)/${1:/downcase}/} = ${1:Aggregate}.create(",
      "      '1',",
      "      ${2:// Creation parameters}",
      "    );",
      "    ",
      "    expect(${1/(.*)/${1:/downcase}/}.id).toBe('1');",
      "    ${3:// Additional assertions}",
      "    ",
      "    const events = ${1/(.*)/${1:/downcase}/}.getUncommittedEvents();",
      "    expect(events).toHaveLength(1);",
      "    expect(events[0]).toBeInstanceOf(${1:Aggregate}Created);",
      "  });",
      "",
      "  it('should update ${1:Aggregate}', () => {",
      "    const ${1/(.*)/${1:/downcase}/} = new ${1:Aggregate}(",
      "      '1',",
      "      ${4:// Constructor parameters}",
      "    );",
      "    ",
      "    ${1/(.*)/${1:/downcase}/}.update({",
      "      ${5:// Update parameters}",
      "    });",
      "    ",
      "    ${6:// Assertions}",
      "  });",
      "});"
    ],
    "description": "Create an aggregate test"
  }
}