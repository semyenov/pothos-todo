# Production configuration for GraphQL Federation
# This file should be used with docker-compose.yml as base

services:
  # Production Hive Gateway
  hive-gateway:
    build:
      context: .
      dockerfile: ./docker/gateway/Dockerfile.prod
    image: pothos-todo-gateway:prod
    restart: always
    environment:
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      # Hive Platform credentials (required)
      HIVE_CDN_ENDPOINT: ${HIVE_CDN_ENDPOINT}
      HIVE_CDN_KEY: ${HIVE_CDN_KEY}
      # CORS configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-https://app.example.com}
      # Telemetry
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED:-true}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Production User Subgraph
  user-subgraph:
    restart: always
    environment:
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Production Todo Subgraph
  todo-subgraph:
    restart: always
    environment:
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Production AI Subgraph
  ai-subgraph:
    restart: always
    environment:
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      # AI services need more memory
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M

  # PostgreSQL with replication readiness
  postgres:
    restart: always
    environment:
      POSTGRES_REPLICATION_MODE: ${POSTGRES_REPLICATION_MODE:-master}
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis with persistence
  redis:
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory ${REDIS_MAX_MEMORY:-512mb}
      --maxmemory-policy ${REDIS_EVICTION_POLICY:-allkeys-lru}
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Qdrant with authentication
  qdrant:
    restart: always
    environment:
      QDRANT__SERVICE__API_KEY: ${QDRANT_API_KEY}
      QDRANT__SERVICE__READ_ONLY_API_KEY: ${QDRANT_READ_ONLY_API_KEY}
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: pothos-todo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - hive-gateway
    networks:
      - pothos-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M